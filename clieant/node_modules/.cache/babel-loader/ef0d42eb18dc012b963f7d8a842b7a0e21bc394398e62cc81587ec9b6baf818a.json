{"ast":null,"code":"class Data {\n  constructor() {\n    this.postFormData = async (link, data) => {\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(data)\n      };\n      const response = await fetch(link, options);\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        throw new Error(errorMessage);\n      }\n      return response.json();\n    };\n    this.getAllPosts = async () => {\n      const options = {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        }\n      };\n      const response = await fetch(\"/posts\", options);\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        throw new Error(errorMessage);\n      }\n      return response.json();\n    };\n    this.getSinglePost = async id => {\n      const options = {\n        method: \"GET\",\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        }\n      };\n      const response = await fetch(`/posts/${id}`, options);\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        throw new Error(errorMessage);\n      }\n      return response.json();\n    };\n    this.createPost = async data => {\n      const options = {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify(data)\n      };\n      const response = await fetch(\"/posts/create\", options);\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        throw new Error(errorMessage);\n      }\n      return response.json();\n    };\n    this.updatePost = async (id, data) => {\n      const options = {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        },\n        body: JSON.stringify(data)\n      };\n      fetch(`/posts/${id}`, options);\n    };\n    this.deletePost = async id => {\n      const options = {\n        method: \"DELETE\",\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        }\n      };\n      fetch(`/posts/${id}`, options);\n    };\n    this.toggleDone = async id => {\n      const response = await fetch(`/done/${id}`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\")\n        }\n      });\n      if (!response.ok) {\n        const errorMessage = await response.text();\n        throw new Error(errorMessage);\n      }\n      return response.json();\n    };\n  }\n}\nexport default new Data();","map":{"version":3,"names":["Data","postFormData","link","data","options","method","headers","body","JSON","stringify","response","fetch","ok","errorMessage","text","Error","json","getAllPosts","Authorization","localStorage","getItem","getSinglePost","id","createPost","updatePost","deletePost","toggleDone"],"sources":["/home/probook/Documents/BitBucket/todo-ts/app/clieant/src/services/Data.ts"],"sourcesContent":["import {User} from '../types/userObject';\nimport {Todo} from '../types/todoObject';\nimport { TodoDone } from '../types/todoDone';\n\nclass Data {\n  postFormData = async (link:string, data: User) => {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(data),\n    };\n\n    const response = await fetch(link, options);\n\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage);\n    }\n    return response.json();\n  };\n\n  getAllPosts = async () => {\n    const options = {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n    };\n    const response = await fetch(\"/posts\", options);\n\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage);\n    }\n    return response.json();\n  };\n  getSinglePost = async (id:string) => {\n    const options = {\n      method: \"GET\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n    };\n    const response = await fetch(`/posts/${id}`, options);\n\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage);\n    }\n    return response.json();\n  };\n  createPost = async (data:Todo) => {\n    const options = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n      body: JSON.stringify(data),\n    };\n\n    const response = await fetch(\"/posts/create\", options);\n\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage);\n    }\n    return response.json();\n  };\n\n  updatePost = async (id:string, data:Todo | TodoDone) => {\n    const options = {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n      body: JSON.stringify(data),\n    };\n    fetch(`/posts/${id}`, options);\n  };\n\n  deletePost = async (id:string) => {\n    const options = {\n      method: \"DELETE\",\n      headers: {\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n    };\n    fetch(`/posts/${id}`, options);\n  };\n\n  toggleDone = async (id:string) => {\n    const response = await fetch(`/done/${id}`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n      },\n    });\n\n    if (!response.ok) {\n      const errorMessage = await response.text();\n      throw new Error(errorMessage);\n    }\n    return response.json();\n  };\n}\n\nexport default new Data();\n"],"mappings":"AAIA,MAAMA,IAAI,CAAC;EAAA;IAAA,KACTC,YAAY,GAAG,OAAOC,IAAW,EAAEC,IAAU,KAAK;MAChD,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;MAC3B,CAAC;MAED,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAACT,IAAI,EAAEE,OAAO,CAAC;MAE3C,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAC1C,MAAM,IAAIC,KAAK,CAACF,YAAY,CAAC;MAC/B;MACA,OAAOH,QAAQ,CAACM,IAAI,EAAE;IACxB,CAAC;IAAA,KAEDC,WAAW,GAAG,YAAY;MACxB,MAAMb,OAAO,GAAG;QACdC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPY,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;QACzD;MACF,CAAC;MACD,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAC,QAAQ,EAAEP,OAAO,CAAC;MAE/C,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAC1C,MAAM,IAAIC,KAAK,CAACF,YAAY,CAAC;MAC/B;MACA,OAAOH,QAAQ,CAACM,IAAI,EAAE;IACxB,CAAC;IAAA,KACDK,aAAa,GAAG,MAAOC,EAAS,IAAK;MACnC,MAAMlB,OAAO,GAAG;QACdC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACPY,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;QACzD;MACF,CAAC;MACD,MAAMV,QAAQ,GAAG,MAAMC,KAAK,CAAE,UAASW,EAAG,EAAC,EAAElB,OAAO,CAAC;MAErD,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAC1C,MAAM,IAAIC,KAAK,CAACF,YAAY,CAAC;MAC/B;MACA,OAAOH,QAAQ,CAACM,IAAI,EAAE;IACxB,CAAC;IAAA,KACDO,UAAU,GAAG,MAAOpB,IAAS,IAAK;MAChC,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCY,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;QACzD,CAAC;QACDb,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;MAC3B,CAAC;MAED,MAAMO,QAAQ,GAAG,MAAMC,KAAK,CAAC,eAAe,EAAEP,OAAO,CAAC;MAEtD,IAAI,CAACM,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAC1C,MAAM,IAAIC,KAAK,CAACF,YAAY,CAAC;MAC/B;MACA,OAAOH,QAAQ,CAACM,IAAI,EAAE;IACxB,CAAC;IAAA,KAEDQ,UAAU,GAAG,OAAOF,EAAS,EAAEnB,IAAoB,KAAK;MACtD,MAAMC,OAAO,GAAG;QACdC,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCY,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;QACzD,CAAC;QACDb,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACN,IAAI;MAC3B,CAAC;MACDQ,KAAK,CAAE,UAASW,EAAG,EAAC,EAAElB,OAAO,CAAC;IAChC,CAAC;IAAA,KAEDqB,UAAU,GAAG,MAAOH,EAAS,IAAK;MAChC,MAAMlB,OAAO,GAAG;QACdC,MAAM,EAAE,QAAQ;QAChBC,OAAO,EAAE;UACPY,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;QACzD;MACF,CAAC;MACDT,KAAK,CAAE,UAASW,EAAG,EAAC,EAAElB,OAAO,CAAC;IAChC,CAAC;IAAA,KAEDsB,UAAU,GAAG,MAAOJ,EAAS,IAAK;MAChC,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAE,SAAQW,EAAG,EAAC,EAAE;QAC1CjB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE,kBAAkB;UAClCY,aAAa,EAAE,SAAS,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO;QACzD;MACF,CAAC,CAAC;MAEF,IAAI,CAACV,QAAQ,CAACE,EAAE,EAAE;QAChB,MAAMC,YAAY,GAAG,MAAMH,QAAQ,CAACI,IAAI,EAAE;QAC1C,MAAM,IAAIC,KAAK,CAACF,YAAY,CAAC;MAC/B;MACA,OAAOH,QAAQ,CAACM,IAAI,EAAE;IACxB,CAAC;EAAA;AACH;AAEA,eAAe,IAAIhB,IAAI,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}